//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./grammars/Language.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace analyzer {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class LanguageParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, INT=45, BOOL=46, 
		FLOAT=47, STRING=48, RUNE=49, WS=50, ID=51, COMMENT=52, ML_COMMENT=53;
	public const int
		RULE_program = 0, RULE_dcl = 1, RULE_varDcl = 2, RULE_type = 3, RULE_funcDcl = 4, 
		RULE_classDcl = 5, RULE_classBody = 6, RULE_params = 7, RULE_stmt = 8, 
		RULE_forInit = 9, RULE_expr = 10, RULE_call = 11, RULE_args = 12;
	public static readonly string[] ruleNames = {
		"program", "dcl", "varDcl", "type", "funcDcl", "classDcl", "classBody", 
		"params", "stmt", "forInit", "expr", "call", "args"
	};

	private static readonly string[] _LiteralNames = {
		null, "'var'", "':'", "'='", "';'", "'int'", "'float'", "'bool'", "'string'", 
		"'rune'", "'function'", "'('", "')'", "'{'", "'}'", "'class'", "','", 
		"'fmt.Println('", "'if'", "'else if'", "'else'", "'while'", "'for'", "'do'", 
		"'break'", "'continue'", "'return'", "'-'", "'!'", "'*'", "'/'", "'%'", 
		"'+'", "'>'", "'<'", "'>='", "'<='", "'=='", "'!='", "'+='", "'-='", "'&&'", 
		"'||'", "'new'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "INT", "BOOL", "FLOAT", 
		"STRING", "RUNE", "WS", "ID", "COMMENT", "ML_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Language.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LanguageParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LanguageParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LanguageParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DclContext[] dcl() {
			return GetRuleContexts<DclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext dcl(int i) {
			return GetRuleContext<DclContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3351311976672258L) != 0)) {
				{
				{
				State = 26;
				dcl();
				}
				}
				State = 31;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDclContext varDcl() {
			return GetRuleContext<VarDclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncDclContext funcDcl() {
			return GetRuleContext<FuncDclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDclContext classDcl() {
			return GetRuleContext<ClassDclContext>(0);
		}
		public DclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DclContext dcl() {
		DclContext _localctx = new DclContext(Context, State);
		EnterRule(_localctx, 2, RULE_dcl);
		try {
			State = 36;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 32;
				varDcl();
				}
				break;
			case T__10:
			case T__12:
			case T__16:
			case T__17:
			case T__20:
			case T__21:
			case T__22:
			case T__23:
			case T__24:
			case T__25:
			case T__26:
			case T__27:
			case T__42:
			case INT:
			case BOOL:
			case FLOAT:
			case STRING:
			case RUNE:
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 33;
				stmt();
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 3);
				{
				State = 34;
				funcDcl();
				}
				break;
			case T__14:
				EnterOuterAlt(_localctx, 4);
				{
				State = 35;
				classDcl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public VarDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDclContext varDcl() {
		VarDclContext _localctx = new VarDclContext(Context, State);
		EnterRule(_localctx, 4, RULE_varDcl);
		int _la;
		try {
			State = 54;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 38;
				Match(T__0);
				State = 39;
				Match(ID);
				State = 40;
				Match(T__1);
				State = 41;
				type();
				State = 44;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 42;
					Match(T__2);
					State = 43;
					expr(0);
					}
				}

				State = 46;
				Match(T__3);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 48;
				Match(T__0);
				State = 49;
				Match(ID);
				State = 50;
				Match(T__2);
				State = 51;
				expr(0);
				State = 52;
				Match(T__3);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 6, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 992L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncDclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext[] dcl() {
			return GetRuleContexts<DclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext dcl(int i) {
			return GetRuleContext<DclContext>(i);
		}
		public FuncDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcDcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncDclContext funcDcl() {
		FuncDclContext _localctx = new FuncDclContext(Context, State);
		EnterRule(_localctx, 8, RULE_funcDcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			Match(T__9);
			State = 59;
			Match(ID);
			State = 60;
			Match(T__10);
			State = 62;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 61;
				@params();
				}
			}

			State = 64;
			Match(T__11);
			State = 65;
			Match(T__12);
			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3351311976672258L) != 0)) {
				{
				{
				State = 66;
				dcl();
				}
				}
				State = 71;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 72;
			Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyContext[] classBody() {
			return GetRuleContexts<ClassBodyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyContext classBody(int i) {
			return GetRuleContext<ClassBodyContext>(i);
		}
		public ClassDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDclContext classDcl() {
		ClassDclContext _localctx = new ClassDclContext(Context, State);
		EnterRule(_localctx, 10, RULE_classDcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			Match(T__14);
			State = 75;
			Match(ID);
			State = 76;
			Match(T__12);
			State = 80;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0 || _la==T__9) {
				{
				{
				State = 77;
				classBody();
				}
				}
				State = 82;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 83;
			Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDclContext varDcl() {
			return GetRuleContext<VarDclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncDclContext funcDcl() {
			return GetRuleContext<FuncDclContext>(0);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(Context, State);
		EnterRule(_localctx, 12, RULE_classBody);
		try {
			State = 87;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 85;
				varDcl();
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 2);
				{
				State = 86;
				funcDcl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(LanguageParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(LanguageParser.ID, i);
		}
		public ParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_params; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamsContext @params() {
		ParamsContext _localctx = new ParamsContext(Context, State);
		EnterRule(_localctx, 14, RULE_params);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			Match(ID);
			State = 94;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__15) {
				{
				{
				State = 90;
				Match(T__15);
				State = 91;
				Match(ID);
				}
				}
				State = 96;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
	 
		public StmtContext() { }
		public virtual void CopyFrom(StmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ContinueStmtContext : StmtContext {
		public ContinueStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrintStmtContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public PrintStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfStmtContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public IfStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprStmtContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStmtContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		public WhileStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BreakStmtContext : StmtContext {
		public BreakStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockStmtContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public DclContext[] dcl() {
			return GetRuleContexts<DclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext dcl(int i) {
			return GetRuleContext<DclContext>(i);
		}
		public BlockStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStmtContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForInitContext forInit() {
			return GetRuleContext<ForInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		public ForStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoWhileStmtContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DoWhileStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoWhileStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStmtContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReturnStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 16, RULE_stmt);
		int _la;
		try {
			int _alt;
			State = 165;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__10:
			case T__26:
			case T__27:
			case T__42:
			case INT:
			case BOOL:
			case FLOAT:
			case STRING:
			case RUNE:
			case ID:
				_localctx = new ExprStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 97;
				expr(0);
				State = 98;
				Match(T__3);
				}
				break;
			case T__16:
				_localctx = new PrintStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 100;
				Match(T__16);
				State = 101;
				expr(0);
				State = 102;
				Match(T__11);
				State = 103;
				Match(T__3);
				}
				break;
			case T__12:
				_localctx = new BlockStmtContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 105;
				Match(T__12);
				State = 109;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3351311976672258L) != 0)) {
					{
					{
					State = 106;
					dcl();
					}
					}
					State = 111;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 112;
				Match(T__13);
				}
				break;
			case T__17:
				_localctx = new IfStmtContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 113;
				Match(T__17);
				State = 114;
				Match(T__10);
				State = 115;
				expr(0);
				State = 116;
				Match(T__11);
				State = 117;
				stmt();
				State = 126;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 118;
						Match(T__18);
						State = 119;
						Match(T__10);
						State = 120;
						expr(0);
						State = 121;
						Match(T__11);
						State = 122;
						stmt();
						}
						} 
					}
					State = 128;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
				}
				State = 131;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
				case 1:
					{
					State = 129;
					Match(T__19);
					State = 130;
					stmt();
					}
					break;
				}
				}
				break;
			case T__20:
				_localctx = new WhileStmtContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 133;
				Match(T__20);
				State = 134;
				Match(T__10);
				State = 135;
				expr(0);
				State = 136;
				Match(T__11);
				State = 137;
				stmt();
				}
				break;
			case T__21:
				_localctx = new ForStmtContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 139;
				Match(T__21);
				State = 140;
				Match(T__10);
				State = 141;
				forInit();
				State = 142;
				expr(0);
				State = 143;
				Match(T__3);
				State = 144;
				expr(0);
				State = 145;
				Match(T__11);
				State = 146;
				stmt();
				}
				break;
			case T__22:
				_localctx = new DoWhileStmtContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 148;
				Match(T__22);
				State = 149;
				stmt();
				State = 150;
				Match(T__20);
				State = 151;
				Match(T__10);
				State = 152;
				expr(0);
				State = 153;
				Match(T__11);
				State = 154;
				Match(T__3);
				}
				break;
			case T__23:
				_localctx = new BreakStmtContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 156;
				Match(T__23);
				State = 157;
				Match(T__3);
				}
				break;
			case T__24:
				_localctx = new ContinueStmtContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 158;
				Match(T__24);
				State = 159;
				Match(T__3);
				}
				break;
			case T__25:
				_localctx = new ReturnStmtContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 160;
				Match(T__25);
				State = 162;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3351311844116480L) != 0)) {
					{
					State = 161;
					expr(0);
					}
				}

				State = 164;
				Match(T__3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDclContext varDcl() {
			return GetRuleContext<VarDclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ForInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInitContext forInit() {
		ForInitContext _localctx = new ForInitContext(Context, State);
		EnterRule(_localctx, 18, RULE_forInit);
		try {
			State = 171;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 167;
				varDcl();
				}
				break;
			case T__10:
			case T__26:
			case T__27:
			case T__42:
			case INT:
			case BOOL:
			case FLOAT:
			case STRING:
			case RUNE:
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 168;
				expr(0);
				State = 169;
				Match(T__3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CalleeContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallContext[] call() {
			return GetRuleContexts<CallContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallContext call(int i) {
			return GetRuleContext<CallContext>(i);
		}
		public CalleeContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallee(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public NewContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNew(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MulDivContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MulDivContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddSubContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AddSubContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParensContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ParensContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public RelationalContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelational(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public LogicalContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(LanguageParser.STRING, 0); }
		public StringContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(LanguageParser.INT, 0); }
		public IntContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FloatContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(LanguageParser.FLOAT, 0); }
		public FloatContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NotContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		public IdentifierContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AssignContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegateContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NegateContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public EqualityContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(LanguageParser.BOOL, 0); }
		public BooleanContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RuneContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RUNE() { return GetToken(LanguageParser.RUNE, 0); }
		public RuneContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRune(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignOpContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AssignOpContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__26:
				{
				_localctx = new NegateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 174;
				Match(T__26);
				State = 175;
				expr(18);
				}
				break;
			case T__27:
				{
				_localctx = new NotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 176;
				Match(T__27);
				State = 177;
				expr(17);
				}
				break;
			case BOOL:
				{
				_localctx = new BooleanContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 178;
				Match(BOOL);
				}
				break;
			case FLOAT:
				{
				_localctx = new FloatContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 179;
				Match(FLOAT);
				}
				break;
			case STRING:
				{
				_localctx = new StringContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 180;
				Match(STRING);
				}
				break;
			case INT:
				{
				_localctx = new IntContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 181;
				Match(INT);
				}
				break;
			case RUNE:
				{
				_localctx = new RuneContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 182;
				Match(RUNE);
				}
				break;
			case T__42:
				{
				_localctx = new NewContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 183;
				Match(T__42);
				State = 184;
				Match(ID);
				State = 185;
				Match(T__10);
				State = 187;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3351311844116480L) != 0)) {
					{
					State = 186;
					args();
					}
				}

				State = 189;
				Match(T__11);
				}
				break;
			case ID:
				{
				_localctx = new IdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 190;
				Match(ID);
				}
				break;
			case T__10:
				{
				_localctx = new ParensContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 191;
				Match(T__10);
				State = 192;
				expr(0);
				State = 193;
				Match(T__11);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 226;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 224;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
					case 1:
						{
						_localctx = new MulDivContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 197;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 198;
						((MulDivContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3758096384L) != 0)) ) {
							((MulDivContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 199;
						expr(16);
						}
						break;
					case 2:
						{
						_localctx = new AddSubContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 200;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 201;
						((AddSubContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__26 || _la==T__31) ) {
							((AddSubContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 202;
						expr(15);
						}
						break;
					case 3:
						{
						_localctx = new RelationalContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 203;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 204;
						((RelationalContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 128849018880L) != 0)) ) {
							((RelationalContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 205;
						expr(14);
						}
						break;
					case 4:
						{
						_localctx = new EqualityContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 206;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 207;
						((EqualityContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__36 || _la==T__37) ) {
							((EqualityContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 208;
						expr(13);
						}
						break;
					case 5:
						{
						_localctx = new AssignOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 209;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 210;
						((AssignOpContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__38 || _la==T__39) ) {
							((AssignOpContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 211;
						expr(12);
						}
						break;
					case 6:
						{
						_localctx = new LogicalContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 212;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 213;
						((LogicalContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__40 || _la==T__41) ) {
							((LogicalContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 214;
						expr(11);
						}
						break;
					case 7:
						{
						_localctx = new AssignContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 215;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 216;
						Match(T__2);
						State = 217;
						expr(10);
						}
						break;
					case 8:
						{
						_localctx = new CalleeContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 218;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 220;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 219;
								call();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 222;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						}
						break;
					}
					} 
				}
				State = 228;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
	 
		public CallContext() { }
		public virtual void CopyFrom(CallContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FuncCallContext : CallContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public FuncCallContext(CallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GetContext : CallContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		public GetContext(CallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(Context, State);
		EnterRule(_localctx, 22, RULE_call);
		int _la;
		try {
			State = 236;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__10:
				_localctx = new FuncCallContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 229;
				Match(T__10);
				State = 231;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3351311844116480L) != 0)) {
					{
					State = 230;
					args();
					}
				}

				State = 233;
				Match(T__11);
				}
				break;
			case T__43:
				_localctx = new GetContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 234;
				Match(T__43);
				State = 235;
				Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(Context, State);
		EnterRule(_localctx, 24, RULE_args);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238;
			expr(0);
			State = 243;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__15) {
				{
				{
				State = 239;
				Match(T__15);
				State = 240;
				expr(0);
				}
				}
				State = 245;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 10: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 15);
		case 1: return Precpred(Context, 14);
		case 2: return Precpred(Context, 13);
		case 3: return Precpred(Context, 12);
		case 4: return Precpred(Context, 11);
		case 5: return Precpred(Context, 10);
		case 6: return Precpred(Context, 9);
		case 7: return Precpred(Context, 16);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,53,247,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,1,0,5,0,28,8,0,10,0,
		12,0,31,9,0,1,1,1,1,1,1,1,1,3,1,37,8,1,1,2,1,2,1,2,1,2,1,2,1,2,3,2,45,
		8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,55,8,2,1,3,1,3,1,4,1,4,1,4,1,4,
		3,4,63,8,4,1,4,1,4,1,4,5,4,68,8,4,10,4,12,4,71,9,4,1,4,1,4,1,5,1,5,1,5,
		1,5,5,5,79,8,5,10,5,12,5,82,9,5,1,5,1,5,1,6,1,6,3,6,88,8,6,1,7,1,7,1,7,
		5,7,93,8,7,10,7,12,7,96,9,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,5,
		8,108,8,8,10,8,12,8,111,9,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
		8,1,8,5,8,125,8,8,10,8,12,8,128,9,8,1,8,1,8,3,8,132,8,8,1,8,1,8,1,8,1,
		8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,163,8,8,1,8,3,8,166,8,8,1,9,1,9,1,
		9,1,9,3,9,172,8,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
		10,1,10,1,10,1,10,3,10,188,8,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,196,
		8,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,4,10,221,8,10,11,10,
		12,10,222,5,10,225,8,10,10,10,12,10,228,9,10,1,11,1,11,3,11,232,8,11,1,
		11,1,11,1,11,3,11,237,8,11,1,12,1,12,1,12,5,12,242,8,12,10,12,12,12,245,
		9,12,1,12,0,1,20,13,0,2,4,6,8,10,12,14,16,18,20,22,24,0,7,1,0,5,9,1,0,
		29,31,2,0,27,27,32,32,1,0,33,36,1,0,37,38,1,0,39,40,1,0,41,42,280,0,29,
		1,0,0,0,2,36,1,0,0,0,4,54,1,0,0,0,6,56,1,0,0,0,8,58,1,0,0,0,10,74,1,0,
		0,0,12,87,1,0,0,0,14,89,1,0,0,0,16,165,1,0,0,0,18,171,1,0,0,0,20,195,1,
		0,0,0,22,236,1,0,0,0,24,238,1,0,0,0,26,28,3,2,1,0,27,26,1,0,0,0,28,31,
		1,0,0,0,29,27,1,0,0,0,29,30,1,0,0,0,30,1,1,0,0,0,31,29,1,0,0,0,32,37,3,
		4,2,0,33,37,3,16,8,0,34,37,3,8,4,0,35,37,3,10,5,0,36,32,1,0,0,0,36,33,
		1,0,0,0,36,34,1,0,0,0,36,35,1,0,0,0,37,3,1,0,0,0,38,39,5,1,0,0,39,40,5,
		51,0,0,40,41,5,2,0,0,41,44,3,6,3,0,42,43,5,3,0,0,43,45,3,20,10,0,44,42,
		1,0,0,0,44,45,1,0,0,0,45,46,1,0,0,0,46,47,5,4,0,0,47,55,1,0,0,0,48,49,
		5,1,0,0,49,50,5,51,0,0,50,51,5,3,0,0,51,52,3,20,10,0,52,53,5,4,0,0,53,
		55,1,0,0,0,54,38,1,0,0,0,54,48,1,0,0,0,55,5,1,0,0,0,56,57,7,0,0,0,57,7,
		1,0,0,0,58,59,5,10,0,0,59,60,5,51,0,0,60,62,5,11,0,0,61,63,3,14,7,0,62,
		61,1,0,0,0,62,63,1,0,0,0,63,64,1,0,0,0,64,65,5,12,0,0,65,69,5,13,0,0,66,
		68,3,2,1,0,67,66,1,0,0,0,68,71,1,0,0,0,69,67,1,0,0,0,69,70,1,0,0,0,70,
		72,1,0,0,0,71,69,1,0,0,0,72,73,5,14,0,0,73,9,1,0,0,0,74,75,5,15,0,0,75,
		76,5,51,0,0,76,80,5,13,0,0,77,79,3,12,6,0,78,77,1,0,0,0,79,82,1,0,0,0,
		80,78,1,0,0,0,80,81,1,0,0,0,81,83,1,0,0,0,82,80,1,0,0,0,83,84,5,14,0,0,
		84,11,1,0,0,0,85,88,3,4,2,0,86,88,3,8,4,0,87,85,1,0,0,0,87,86,1,0,0,0,
		88,13,1,0,0,0,89,94,5,51,0,0,90,91,5,16,0,0,91,93,5,51,0,0,92,90,1,0,0,
		0,93,96,1,0,0,0,94,92,1,0,0,0,94,95,1,0,0,0,95,15,1,0,0,0,96,94,1,0,0,
		0,97,98,3,20,10,0,98,99,5,4,0,0,99,166,1,0,0,0,100,101,5,17,0,0,101,102,
		3,20,10,0,102,103,5,12,0,0,103,104,5,4,0,0,104,166,1,0,0,0,105,109,5,13,
		0,0,106,108,3,2,1,0,107,106,1,0,0,0,108,111,1,0,0,0,109,107,1,0,0,0,109,
		110,1,0,0,0,110,112,1,0,0,0,111,109,1,0,0,0,112,166,5,14,0,0,113,114,5,
		18,0,0,114,115,5,11,0,0,115,116,3,20,10,0,116,117,5,12,0,0,117,126,3,16,
		8,0,118,119,5,19,0,0,119,120,5,11,0,0,120,121,3,20,10,0,121,122,5,12,0,
		0,122,123,3,16,8,0,123,125,1,0,0,0,124,118,1,0,0,0,125,128,1,0,0,0,126,
		124,1,0,0,0,126,127,1,0,0,0,127,131,1,0,0,0,128,126,1,0,0,0,129,130,5,
		20,0,0,130,132,3,16,8,0,131,129,1,0,0,0,131,132,1,0,0,0,132,166,1,0,0,
		0,133,134,5,21,0,0,134,135,5,11,0,0,135,136,3,20,10,0,136,137,5,12,0,0,
		137,138,3,16,8,0,138,166,1,0,0,0,139,140,5,22,0,0,140,141,5,11,0,0,141,
		142,3,18,9,0,142,143,3,20,10,0,143,144,5,4,0,0,144,145,3,20,10,0,145,146,
		5,12,0,0,146,147,3,16,8,0,147,166,1,0,0,0,148,149,5,23,0,0,149,150,3,16,
		8,0,150,151,5,21,0,0,151,152,5,11,0,0,152,153,3,20,10,0,153,154,5,12,0,
		0,154,155,5,4,0,0,155,166,1,0,0,0,156,157,5,24,0,0,157,166,5,4,0,0,158,
		159,5,25,0,0,159,166,5,4,0,0,160,162,5,26,0,0,161,163,3,20,10,0,162,161,
		1,0,0,0,162,163,1,0,0,0,163,164,1,0,0,0,164,166,5,4,0,0,165,97,1,0,0,0,
		165,100,1,0,0,0,165,105,1,0,0,0,165,113,1,0,0,0,165,133,1,0,0,0,165,139,
		1,0,0,0,165,148,1,0,0,0,165,156,1,0,0,0,165,158,1,0,0,0,165,160,1,0,0,
		0,166,17,1,0,0,0,167,172,3,4,2,0,168,169,3,20,10,0,169,170,5,4,0,0,170,
		172,1,0,0,0,171,167,1,0,0,0,171,168,1,0,0,0,172,19,1,0,0,0,173,174,6,10,
		-1,0,174,175,5,27,0,0,175,196,3,20,10,18,176,177,5,28,0,0,177,196,3,20,
		10,17,178,196,5,46,0,0,179,196,5,47,0,0,180,196,5,48,0,0,181,196,5,45,
		0,0,182,196,5,49,0,0,183,184,5,43,0,0,184,185,5,51,0,0,185,187,5,11,0,
		0,186,188,3,24,12,0,187,186,1,0,0,0,187,188,1,0,0,0,188,189,1,0,0,0,189,
		196,5,12,0,0,190,196,5,51,0,0,191,192,5,11,0,0,192,193,3,20,10,0,193,194,
		5,12,0,0,194,196,1,0,0,0,195,173,1,0,0,0,195,176,1,0,0,0,195,178,1,0,0,
		0,195,179,1,0,0,0,195,180,1,0,0,0,195,181,1,0,0,0,195,182,1,0,0,0,195,
		183,1,0,0,0,195,190,1,0,0,0,195,191,1,0,0,0,196,226,1,0,0,0,197,198,10,
		15,0,0,198,199,7,1,0,0,199,225,3,20,10,16,200,201,10,14,0,0,201,202,7,
		2,0,0,202,225,3,20,10,15,203,204,10,13,0,0,204,205,7,3,0,0,205,225,3,20,
		10,14,206,207,10,12,0,0,207,208,7,4,0,0,208,225,3,20,10,13,209,210,10,
		11,0,0,210,211,7,5,0,0,211,225,3,20,10,12,212,213,10,10,0,0,213,214,7,
		6,0,0,214,225,3,20,10,11,215,216,10,9,0,0,216,217,5,3,0,0,217,225,3,20,
		10,10,218,220,10,16,0,0,219,221,3,22,11,0,220,219,1,0,0,0,221,222,1,0,
		0,0,222,220,1,0,0,0,222,223,1,0,0,0,223,225,1,0,0,0,224,197,1,0,0,0,224,
		200,1,0,0,0,224,203,1,0,0,0,224,206,1,0,0,0,224,209,1,0,0,0,224,212,1,
		0,0,0,224,215,1,0,0,0,224,218,1,0,0,0,225,228,1,0,0,0,226,224,1,0,0,0,
		226,227,1,0,0,0,227,21,1,0,0,0,228,226,1,0,0,0,229,231,5,11,0,0,230,232,
		3,24,12,0,231,230,1,0,0,0,231,232,1,0,0,0,232,233,1,0,0,0,233,237,5,12,
		0,0,234,235,5,44,0,0,235,237,5,51,0,0,236,229,1,0,0,0,236,234,1,0,0,0,
		237,23,1,0,0,0,238,243,3,20,10,0,239,240,5,16,0,0,240,242,3,20,10,0,241,
		239,1,0,0,0,242,245,1,0,0,0,243,241,1,0,0,0,243,244,1,0,0,0,244,25,1,0,
		0,0,245,243,1,0,0,0,23,29,36,44,54,62,69,80,87,94,109,126,131,162,165,
		171,187,195,222,224,226,231,236,243
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace analyzer
