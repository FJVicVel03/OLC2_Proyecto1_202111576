//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./grammars/Language.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace analyzer {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class LanguageParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, INT=62, BOOL=63, FLOAT=64, STRING=65, RUNE=66, WS=67, 
		ID=68, COMMENT=69, ML_COMMENT=70, ESC_SEQ=71;
	public const int
		RULE_program = 0, RULE_dcl = 1, RULE_varDcl = 2, RULE_type = 3, RULE_funcDcl = 4, 
		RULE_structDcl = 5, RULE_structBody = 6, RULE_params = 7, RULE_stmt = 8, 
		RULE_switchCase = 9, RULE_caseStmt = 10, RULE_defaultStmt = 11, RULE_forInit = 12, 
		RULE_expr = 13, RULE_call = 14, RULE_args = 15, RULE_matrixRow = 16, RULE_structField = 17;
	public static readonly string[] ruleNames = {
		"program", "dcl", "varDcl", "type", "funcDcl", "structDcl", "structBody", 
		"params", "stmt", "switchCase", "caseStmt", "defaultStmt", "forInit", 
		"expr", "call", "args", "matrixRow", "structField"
	};

	private static readonly string[] _LiteralNames = {
		null, "'var'", "':'", "'='", "':='", "'int'", "'float'", "'bool'", "'string'", 
		"'rune'", "'func'", "'('", "')'", "'{'", "'}'", "'struct'", "';'", "','", 
		"'fmt.Println('", "'if'", "'else if'", "'else'", "'while'", "'for'", "'do'", 
		"'switch'", "'case'", "'default'", "'break'", "'continue'", "'return'", 
		"'-'", "'!'", "'*'", "'/'", "'%'", "'+'", "'>'", "'<'", "'>='", "'<='", 
		"'=='", "'!='", "'+='", "'-='", "'&&'", "'||'", "'++'", "'--'", "'[]'", 
		"'[][]'", "'['", "']'", "'slices.Index'", "'strings.Join'", "'len'", "'append'", 
		"'strconv.Atoi'", "'strconv.ParseFloat'", "'reflect.TypeOf'", "'.'", "'new'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "INT", "BOOL", "FLOAT", "STRING", "RUNE", "WS", "ID", "COMMENT", 
		"ML_COMMENT", "ESC_SEQ"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Language.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LanguageParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LanguageParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LanguageParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DclContext[] dcl() {
			return GetRuleContexts<DclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext dcl(int i) {
			return GetRuleContext<DclContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -1160239845414753278L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 23L) != 0)) {
				{
				{
				State = 36;
				dcl();
				}
				}
				State = 41;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDclContext varDcl() {
			return GetRuleContext<VarDclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncDclContext funcDcl() {
			return GetRuleContext<FuncDclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDclContext structDcl() {
			return GetRuleContext<StructDclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DclContext dcl() {
		DclContext _localctx = new DclContext(Context, State);
		EnterRule(_localctx, 2, RULE_dcl);
		try {
			State = 47;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 42;
				varDcl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 43;
				stmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 44;
				funcDcl();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 45;
				structDcl();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 46;
				expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public VarDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDclContext varDcl() {
		VarDclContext _localctx = new VarDclContext(Context, State);
		EnterRule(_localctx, 4, RULE_varDcl);
		int _la;
		try {
			State = 64;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 49;
				Match(T__0);
				State = 50;
				Match(ID);
				State = 51;
				Match(T__1);
				State = 52;
				type();
				State = 55;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 53;
					Match(T__2);
					State = 54;
					expr(0);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 57;
				Match(T__0);
				State = 58;
				Match(ID);
				State = 59;
				Match(T__2);
				State = 60;
				expr(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 61;
				Match(ID);
				State = 62;
				Match(T__3);
				State = 63;
				expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 6, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 5)) & ~0x3f) == 0 && ((1L << (_la - 5)) & -9223372036854775777L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncDclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext[] dcl() {
			return GetRuleContexts<DclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext dcl(int i) {
			return GetRuleContext<DclContext>(i);
		}
		public FuncDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcDcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncDclContext funcDcl() {
		FuncDclContext _localctx = new FuncDclContext(Context, State);
		EnterRule(_localctx, 8, RULE_funcDcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			Match(T__9);
			State = 69;
			Match(ID);
			State = 70;
			Match(T__10);
			State = 72;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0 || _la==ID) {
				{
				State = 71;
				@params();
				}
			}

			State = 74;
			Match(T__11);
			State = 75;
			Match(T__12);
			State = 79;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -1160239845414753278L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 23L) != 0)) {
				{
				{
				State = 76;
				dcl();
				}
				}
				State = 81;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 82;
			Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructBodyContext[] structBody() {
			return GetRuleContexts<StructBodyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructBodyContext structBody(int i) {
			return GetRuleContext<StructBodyContext>(i);
		}
		public StructDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDclContext structDcl() {
		StructDclContext _localctx = new StructDclContext(Context, State);
		EnterRule(_localctx, 10, RULE_structDcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			Match(T__14);
			State = 85;
			Match(ID);
			State = 86;
			Match(T__12);
			State = 90;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ID) {
				{
				{
				State = 87;
				structBody();
				}
				}
				State = 92;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 93;
			Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public StructBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructBodyContext structBody() {
		StructBodyContext _localctx = new StructBodyContext(Context, State);
		EnterRule(_localctx, 12, RULE_structBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			Match(ID);
			State = 96;
			Match(T__1);
			State = 97;
			type();
			State = 98;
			Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(LanguageParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(LanguageParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_params; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamsContext @params() {
		ParamsContext _localctx = new ParamsContext(Context, State);
		EnterRule(_localctx, 14, RULE_params);
		int _la;
		try {
			State = 122;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 100;
				Match(ID);
				State = 105;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__16) {
					{
					{
					State = 101;
					Match(T__16);
					State = 102;
					Match(ID);
					}
					}
					State = 107;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 2);
				{
				State = 108;
				Match(T__0);
				State = 109;
				Match(ID);
				State = 110;
				Match(T__1);
				State = 111;
				type();
				State = 119;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__16) {
					{
					{
					State = 112;
					Match(T__16);
					State = 113;
					Match(T__0);
					State = 114;
					Match(ID);
					State = 115;
					Match(T__1);
					State = 116;
					type();
					}
					}
					State = 121;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
	 
		public StmtContext() { }
		public virtual void CopyFrom(StmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SwitchStmtContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchCaseContext[] switchCase() {
			return GetRuleContexts<SwitchCaseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchCaseContext switchCase(int i) {
			return GetRuleContext<SwitchCaseContext>(i);
		}
		public SwitchStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrintStmtContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public PrintStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseStatementContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		public CaseStatementContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockStmtContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public DclContext[] dcl() {
			return GetRuleContexts<DclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext dcl(int i) {
			return GetRuleContext<DclContext>(i);
		}
		public BlockStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefaultCaseStmtContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		public DefaultCaseStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultCaseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForConditionStmtContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public ForConditionStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForConditionStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoWhileStmtContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DoWhileStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoWhileStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ContinueStmtContext : StmtContext {
		public ContinueStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfStmtContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public IfStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprStmtContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStmtContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		public WhileStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BreakStmtContext : StmtContext {
		public BreakStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStmtContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForInitContext forInit() {
			return GetRuleContext<ForInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		public ForStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStmtContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReturnStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 16, RULE_stmt);
		int _la;
		try {
			int _alt;
			State = 210;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				_localctx = new ExprStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 124;
				expr(0);
				State = 125;
				Match(T__15);
				}
				break;
			case 2:
				_localctx = new PrintStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 127;
				Match(T__17);
				State = 129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 11)) & ~0x3f) == 0 && ((1L << (_la - 11)) & 215606258750717953L) != 0)) {
					{
					State = 128;
					args();
					}
				}

				State = 131;
				Match(T__11);
				}
				break;
			case 3:
				_localctx = new BlockStmtContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 132;
				Match(T__12);
				State = 136;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -1160239845414753278L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 23L) != 0)) {
					{
					{
					State = 133;
					dcl();
					}
					}
					State = 138;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 139;
				Match(T__13);
				}
				break;
			case 4:
				_localctx = new IfStmtContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 140;
				Match(T__18);
				State = 141;
				expr(0);
				State = 142;
				stmt();
				State = 149;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 143;
						Match(T__19);
						State = 144;
						expr(0);
						State = 145;
						stmt();
						}
						} 
					}
					State = 151;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
				}
				State = 154;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
				case 1:
					{
					State = 152;
					Match(T__20);
					State = 153;
					stmt();
					}
					break;
				}
				}
				break;
			case 5:
				_localctx = new WhileStmtContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 156;
				Match(T__21);
				State = 157;
				Match(T__10);
				State = 158;
				expr(0);
				State = 159;
				Match(T__11);
				State = 160;
				stmt();
				}
				break;
			case 6:
				_localctx = new ForConditionStmtContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 162;
				Match(T__22);
				State = 163;
				expr(0);
				State = 164;
				Match(T__12);
				State = 168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 11)) & ~0x3f) == 0 && ((1L << (_la - 11)) & 215606258751764869L) != 0)) {
					{
					{
					State = 165;
					stmt();
					}
					}
					State = 170;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 171;
				Match(T__13);
				}
				break;
			case 7:
				_localctx = new ForStmtContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 173;
				Match(T__22);
				State = 174;
				forInit();
				State = 175;
				expr(0);
				State = 176;
				Match(T__15);
				State = 177;
				expr(0);
				State = 178;
				stmt();
				}
				break;
			case 8:
				_localctx = new DoWhileStmtContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 180;
				Match(T__23);
				State = 181;
				stmt();
				State = 182;
				Match(T__21);
				State = 183;
				Match(T__10);
				State = 184;
				expr(0);
				State = 185;
				Match(T__11);
				}
				break;
			case 9:
				_localctx = new SwitchStmtContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 187;
				Match(T__24);
				State = 188;
				expr(0);
				State = 189;
				Match(T__12);
				State = 193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__25 || _la==T__26) {
					{
					{
					State = 190;
					switchCase();
					}
					}
					State = 195;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 196;
				Match(T__13);
				}
				break;
			case 10:
				_localctx = new CaseStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 198;
				Match(T__25);
				State = 199;
				expr(0);
				State = 200;
				stmt();
				}
				break;
			case 11:
				_localctx = new DefaultCaseStmtContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 202;
				Match(T__26);
				State = 203;
				stmt();
				}
				break;
			case 12:
				_localctx = new BreakStmtContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 204;
				Match(T__27);
				}
				break;
			case 13:
				_localctx = new ContinueStmtContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 205;
				Match(T__28);
				}
				break;
			case 14:
				_localctx = new ReturnStmtContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 206;
				Match(T__29);
				State = 208;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
				case 1:
					{
					State = 207;
					expr(0);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchCaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaseStmtContext caseStmt() {
			return GetRuleContext<CaseStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultStmtContext defaultStmt() {
			return GetRuleContext<DefaultStmtContext>(0);
		}
		public SwitchCaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchCase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchCase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchCaseContext switchCase() {
		SwitchCaseContext _localctx = new SwitchCaseContext(Context, State);
		EnterRule(_localctx, 18, RULE_switchCase);
		try {
			State = 214;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__25:
				EnterOuterAlt(_localctx, 1);
				{
				State = 212;
				caseStmt();
				}
				break;
			case T__26:
				EnterOuterAlt(_localctx, 2);
				{
				State = 213;
				defaultStmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		public CaseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseStmtContext caseStmt() {
		CaseStmtContext _localctx = new CaseStmtContext(Context, State);
		EnterRule(_localctx, 20, RULE_caseStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			Match(T__25);
			State = 217;
			expr(0);
			State = 218;
			Match(T__1);
			State = 219;
			stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		public DefaultStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultStmtContext defaultStmt() {
		DefaultStmtContext _localctx = new DefaultStmtContext(Context, State);
		EnterRule(_localctx, 22, RULE_defaultStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221;
			Match(T__26);
			State = 222;
			Match(T__1);
			State = 223;
			stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDclContext varDcl() {
			return GetRuleContext<VarDclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ForInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInitContext forInit() {
		ForInitContext _localctx = new ForInitContext(Context, State);
		EnterRule(_localctx, 24, RULE_forInit);
		try {
			State = 229;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 225;
				varDcl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 226;
				expr(0);
				State = 227;
				Match(T__15);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CalleeContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallContext[] call() {
			return GetRuleContexts<CallContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallContext call(int i) {
			return GetRuleContext<CallContext>(i);
		}
		public CalleeContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallee(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SliceIndexCallContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public SliceIndexCallContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSliceIndexCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public NewContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNew(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiDimSliceInitContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MatrixRowContext[] matrixRow() {
			return GetRuleContexts<MatrixRowContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MatrixRowContext matrixRow(int i) {
			return GetRuleContext<MatrixRowContext>(i);
		}
		public MultiDimSliceInitContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiDimSliceInit(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MulDivContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MulDivContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParensContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ParensContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringsJoinCallContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public StringsJoinCallContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringsJoinCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiDimSliceAccessContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MultiDimSliceAccessContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiDimSliceAccess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public LogicalContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(LanguageParser.STRING, 0); }
		public StringContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(LanguageParser.INT, 0); }
		public IntContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParseFloatCallContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ParseFloatCallContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParseFloatCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StructAccessContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		public StructAccessContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructAccess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LenCallContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public LenCallContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLenCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		public IdentifierContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeOfCallContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public TypeOfCallContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeOfCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public EqualityContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(LanguageParser.BOOL, 0); }
		public BooleanContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SliceInitContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public SliceInitContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSliceInit(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignOpContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AssignOpContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SliceAccessContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public SliceAccessContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSliceAccess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StructInitContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructFieldContext[] structField() {
			return GetRuleContexts<StructFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructFieldContext structField(int i) {
			return GetRuleContext<StructFieldContext>(i);
		}
		public StructInitContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructInit(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddSubContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AddSubContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public RelationalContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelational(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IncDecContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public IncDecContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncDec(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FloatContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(LanguageParser.FLOAT, 0); }
		public FloatContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NotContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SliceRangeContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public SliceRangeContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSliceRange(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AssignContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegateContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NegateContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AtoiCallContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AtoiCallContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtoiCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AppendCallContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AppendCallContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAppendCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RuneContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RUNE() { return GetToken(LanguageParser.RUNE, 0); }
		public RuneContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRune(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 339;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				_localctx = new NegateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 232;
				Match(T__30);
				State = 233;
				expr(33);
				}
				break;
			case 2:
				{
				_localctx = new NotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 234;
				Match(T__31);
				State = 235;
				expr(32);
				}
				break;
			case 3:
				{
				_localctx = new SliceInitContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 236;
				Match(T__48);
				State = 237;
				type();
				State = 238;
				Match(T__12);
				State = 239;
				expr(0);
				State = 244;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__16) {
					{
					{
					State = 240;
					Match(T__16);
					State = 241;
					expr(0);
					}
					}
					State = 246;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 247;
				Match(T__13);
				}
				break;
			case 4:
				{
				_localctx = new MultiDimSliceInitContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 249;
				Match(T__49);
				State = 250;
				type();
				State = 251;
				Match(T__12);
				State = 252;
				matrixRow();
				State = 257;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__16) {
					{
					{
					State = 253;
					Match(T__16);
					State = 254;
					matrixRow();
					}
					}
					State = 259;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 260;
				Match(T__13);
				}
				break;
			case 5:
				{
				_localctx = new SliceIndexCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 262;
				Match(T__52);
				State = 263;
				Match(T__10);
				State = 264;
				expr(0);
				State = 265;
				Match(T__16);
				State = 266;
				expr(0);
				State = 267;
				Match(T__11);
				}
				break;
			case 6:
				{
				_localctx = new StringsJoinCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 269;
				Match(T__53);
				State = 270;
				Match(T__10);
				State = 271;
				expr(0);
				State = 272;
				Match(T__16);
				State = 273;
				expr(0);
				State = 274;
				Match(T__11);
				}
				break;
			case 7:
				{
				_localctx = new LenCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 276;
				Match(T__54);
				State = 277;
				Match(T__10);
				State = 278;
				expr(0);
				State = 279;
				Match(T__11);
				}
				break;
			case 8:
				{
				_localctx = new AppendCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 281;
				Match(T__55);
				State = 282;
				Match(T__10);
				State = 283;
				expr(0);
				State = 284;
				Match(T__16);
				State = 285;
				expr(0);
				State = 290;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__16) {
					{
					{
					State = 286;
					Match(T__16);
					State = 287;
					expr(0);
					}
					}
					State = 292;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 293;
				Match(T__11);
				}
				break;
			case 9:
				{
				_localctx = new AtoiCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 295;
				Match(T__56);
				State = 296;
				Match(T__10);
				State = 297;
				expr(0);
				State = 298;
				Match(T__11);
				}
				break;
			case 10:
				{
				_localctx = new ParseFloatCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 300;
				Match(T__57);
				State = 301;
				Match(T__10);
				State = 302;
				expr(0);
				State = 303;
				Match(T__11);
				}
				break;
			case 11:
				{
				_localctx = new TypeOfCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 305;
				Match(T__58);
				State = 306;
				Match(T__10);
				State = 307;
				expr(0);
				State = 308;
				Match(T__11);
				}
				break;
			case 12:
				{
				_localctx = new StructInitContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 310;
				Match(ID);
				State = 311;
				Match(T__12);
				State = 312;
				structField();
				State = 317;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__16) {
					{
					{
					State = 313;
					Match(T__16);
					State = 314;
					structField();
					}
					}
					State = 319;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 320;
				Match(T__13);
				}
				break;
			case 13:
				{
				_localctx = new BooleanContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 322;
				Match(BOOL);
				}
				break;
			case 14:
				{
				_localctx = new FloatContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 323;
				Match(FLOAT);
				}
				break;
			case 15:
				{
				_localctx = new StringContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 324;
				Match(STRING);
				}
				break;
			case 16:
				{
				_localctx = new IntContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 325;
				Match(INT);
				}
				break;
			case 17:
				{
				_localctx = new RuneContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 326;
				Match(RUNE);
				}
				break;
			case 18:
				{
				_localctx = new NewContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 327;
				Match(T__60);
				State = 328;
				Match(ID);
				State = 329;
				Match(T__10);
				State = 331;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 11)) & ~0x3f) == 0 && ((1L << (_la - 11)) & 215606258750717953L) != 0)) {
					{
					State = 330;
					args();
					}
				}

				State = 333;
				Match(T__11);
				}
				break;
			case 19:
				{
				_localctx = new IdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 334;
				Match(ID);
				}
				break;
			case 20:
				{
				_localctx = new ParensContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 335;
				Match(T__10);
				State = 336;
				expr(0);
				State = 337;
				Match(T__11);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 395;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 393;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
					case 1:
						{
						_localctx = new MulDivContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 341;
						if (!(Precpred(Context, 30))) throw new FailedPredicateException(this, "Precpred(Context, 30)");
						State = 342;
						((MulDivContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 60129542144L) != 0)) ) {
							((MulDivContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 343;
						expr(31);
						}
						break;
					case 2:
						{
						_localctx = new AddSubContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 344;
						if (!(Precpred(Context, 29))) throw new FailedPredicateException(this, "Precpred(Context, 29)");
						State = 345;
						((AddSubContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__30 || _la==T__35) ) {
							((AddSubContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 346;
						expr(30);
						}
						break;
					case 3:
						{
						_localctx = new RelationalContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 347;
						if (!(Precpred(Context, 28))) throw new FailedPredicateException(this, "Precpred(Context, 28)");
						State = 348;
						((RelationalContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2061584302080L) != 0)) ) {
							((RelationalContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 349;
						expr(29);
						}
						break;
					case 4:
						{
						_localctx = new EqualityContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 350;
						if (!(Precpred(Context, 27))) throw new FailedPredicateException(this, "Precpred(Context, 27)");
						State = 351;
						((EqualityContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__40 || _la==T__41) ) {
							((EqualityContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 352;
						expr(28);
						}
						break;
					case 5:
						{
						_localctx = new AssignOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 353;
						if (!(Precpred(Context, 26))) throw new FailedPredicateException(this, "Precpred(Context, 26)");
						State = 354;
						((AssignOpContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__42 || _la==T__43) ) {
							((AssignOpContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 355;
						expr(27);
						}
						break;
					case 6:
						{
						_localctx = new LogicalContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 356;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 357;
						((LogicalContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__44 || _la==T__45) ) {
							((LogicalContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 358;
						expr(26);
						}
						break;
					case 7:
						{
						_localctx = new AssignContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 359;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 360;
						_la = TokenStream.LA(1);
						if ( !(_la==T__2 || _la==T__3) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 361;
						expr(25);
						}
						break;
					case 8:
						{
						_localctx = new CalleeContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 362;
						if (!(Precpred(Context, 31))) throw new FailedPredicateException(this, "Precpred(Context, 31)");
						State = 364;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 363;
								call();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 366;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						}
						break;
					case 9:
						{
						_localctx = new IncDecContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 368;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 369;
						_la = TokenStream.LA(1);
						if ( !(_la==T__46 || _la==T__47) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case 10:
						{
						_localctx = new MultiDimSliceAccessContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 370;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 371;
						Match(T__50);
						State = 372;
						expr(0);
						State = 373;
						Match(T__51);
						State = 374;
						Match(T__50);
						State = 375;
						expr(0);
						State = 376;
						Match(T__51);
						}
						break;
					case 11:
						{
						_localctx = new SliceAccessContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 378;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 379;
						Match(T__50);
						State = 380;
						expr(0);
						State = 381;
						Match(T__51);
						}
						break;
					case 12:
						{
						_localctx = new SliceRangeContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 383;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 384;
						Match(T__50);
						State = 385;
						expr(0);
						State = 386;
						Match(T__1);
						State = 387;
						expr(0);
						State = 388;
						Match(T__51);
						}
						break;
					case 13:
						{
						_localctx = new StructAccessContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 390;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 391;
						Match(T__59);
						State = 392;
						Match(ID);
						}
						break;
					}
					} 
				}
				State = 397;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
	 
		public CallContext() { }
		public virtual void CopyFrom(CallContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FuncCallContext : CallContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public FuncCallContext(CallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GetContext : CallContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		public GetContext(CallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(Context, State);
		EnterRule(_localctx, 28, RULE_call);
		int _la;
		try {
			State = 405;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__10:
				_localctx = new FuncCallContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 398;
				Match(T__10);
				State = 400;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 11)) & ~0x3f) == 0 && ((1L << (_la - 11)) & 215606258750717953L) != 0)) {
					{
					State = 399;
					args();
					}
				}

				State = 402;
				Match(T__11);
				}
				break;
			case T__59:
				_localctx = new GetContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 403;
				Match(T__59);
				State = 404;
				Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(Context, State);
		EnterRule(_localctx, 30, RULE_args);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 407;
			expr(0);
			State = 412;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__16) {
				{
				{
				State = 408;
				Match(T__16);
				State = 409;
				expr(0);
				}
				}
				State = 414;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatrixRowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MatrixRowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matrixRow; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatrixRow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatrixRowContext matrixRow() {
		MatrixRowContext _localctx = new MatrixRowContext(Context, State);
		EnterRule(_localctx, 32, RULE_matrixRow);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 415;
			Match(T__12);
			State = 416;
			expr(0);
			State = 421;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__16) {
				{
				{
				State = 417;
				Match(T__16);
				State = 418;
				expr(0);
				}
				}
				State = 423;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 424;
			Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public StructFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructFieldContext structField() {
		StructFieldContext _localctx = new StructFieldContext(Context, State);
		EnterRule(_localctx, 34, RULE_structField);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 426;
			Match(ID);
			State = 427;
			Match(T__1);
			State = 428;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 13: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 30);
		case 1: return Precpred(Context, 29);
		case 2: return Precpred(Context, 28);
		case 3: return Precpred(Context, 27);
		case 4: return Precpred(Context, 26);
		case 5: return Precpred(Context, 25);
		case 6: return Precpred(Context, 24);
		case 7: return Precpred(Context, 31);
		case 8: return Precpred(Context, 23);
		case 9: return Precpred(Context, 20);
		case 10: return Precpred(Context, 19);
		case 11: return Precpred(Context, 18);
		case 12: return Precpred(Context, 9);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,71,431,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,1,0,5,0,38,8,0,10,0,12,0,41,9,0,1,1,1,1,
		1,1,1,1,1,1,3,1,48,8,1,1,2,1,2,1,2,1,2,1,2,1,2,3,2,56,8,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,3,2,65,8,2,1,3,1,3,1,4,1,4,1,4,1,4,3,4,73,8,4,1,4,1,4,
		1,4,5,4,78,8,4,10,4,12,4,81,9,4,1,4,1,4,1,5,1,5,1,5,1,5,5,5,89,8,5,10,
		5,12,5,92,9,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,5,7,104,8,7,10,7,
		12,7,107,9,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,118,8,7,10,7,12,7,
		121,9,7,3,7,123,8,7,1,8,1,8,1,8,1,8,1,8,3,8,130,8,8,1,8,1,8,1,8,5,8,135,
		8,8,10,8,12,8,138,9,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,148,8,8,10,8,
		12,8,151,9,8,1,8,1,8,3,8,155,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
		8,5,8,167,8,8,10,8,12,8,170,9,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
		8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,192,8,8,10,8,12,8,195,9,
		8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,209,8,8,3,8,211,
		8,8,1,9,1,9,3,9,215,8,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,
		12,1,12,1,12,1,12,3,12,230,8,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
		1,13,1,13,1,13,5,13,243,8,13,10,13,12,13,246,9,13,1,13,1,13,1,13,1,13,
		1,13,1,13,1,13,1,13,5,13,256,8,13,10,13,12,13,259,9,13,1,13,1,13,1,13,
		1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
		1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,5,13,289,8,13,10,
		13,12,13,292,9,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
		13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,5,13,316,8,13,
		10,13,12,13,319,9,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
		1,13,3,13,332,8,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,340,8,13,1,13,1,
		13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
		13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,4,13,365,8,13,11,13,12,13,366,1,
		13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
		13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,5,13,394,8,13,10,
		13,12,13,397,9,13,1,14,1,14,3,14,401,8,14,1,14,1,14,1,14,3,14,406,8,14,
		1,15,1,15,1,15,5,15,411,8,15,10,15,12,15,414,9,15,1,16,1,16,1,16,1,16,
		5,16,420,8,16,10,16,12,16,423,9,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,
		0,1,26,18,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,0,9,2,0,5,9,
		68,68,1,0,33,35,2,0,31,31,36,36,1,0,37,40,1,0,41,42,1,0,43,44,1,0,45,46,
		1,0,3,4,1,0,47,48,490,0,39,1,0,0,0,2,47,1,0,0,0,4,64,1,0,0,0,6,66,1,0,
		0,0,8,68,1,0,0,0,10,84,1,0,0,0,12,95,1,0,0,0,14,122,1,0,0,0,16,210,1,0,
		0,0,18,214,1,0,0,0,20,216,1,0,0,0,22,221,1,0,0,0,24,229,1,0,0,0,26,339,
		1,0,0,0,28,405,1,0,0,0,30,407,1,0,0,0,32,415,1,0,0,0,34,426,1,0,0,0,36,
		38,3,2,1,0,37,36,1,0,0,0,38,41,1,0,0,0,39,37,1,0,0,0,39,40,1,0,0,0,40,
		1,1,0,0,0,41,39,1,0,0,0,42,48,3,4,2,0,43,48,3,16,8,0,44,48,3,8,4,0,45,
		48,3,10,5,0,46,48,3,26,13,0,47,42,1,0,0,0,47,43,1,0,0,0,47,44,1,0,0,0,
		47,45,1,0,0,0,47,46,1,0,0,0,48,3,1,0,0,0,49,50,5,1,0,0,50,51,5,68,0,0,
		51,52,5,2,0,0,52,55,3,6,3,0,53,54,5,3,0,0,54,56,3,26,13,0,55,53,1,0,0,
		0,55,56,1,0,0,0,56,65,1,0,0,0,57,58,5,1,0,0,58,59,5,68,0,0,59,60,5,3,0,
		0,60,65,3,26,13,0,61,62,5,68,0,0,62,63,5,4,0,0,63,65,3,26,13,0,64,49,1,
		0,0,0,64,57,1,0,0,0,64,61,1,0,0,0,65,5,1,0,0,0,66,67,7,0,0,0,67,7,1,0,
		0,0,68,69,5,10,0,0,69,70,5,68,0,0,70,72,5,11,0,0,71,73,3,14,7,0,72,71,
		1,0,0,0,72,73,1,0,0,0,73,74,1,0,0,0,74,75,5,12,0,0,75,79,5,13,0,0,76,78,
		3,2,1,0,77,76,1,0,0,0,78,81,1,0,0,0,79,77,1,0,0,0,79,80,1,0,0,0,80,82,
		1,0,0,0,81,79,1,0,0,0,82,83,5,14,0,0,83,9,1,0,0,0,84,85,5,15,0,0,85,86,
		5,68,0,0,86,90,5,13,0,0,87,89,3,12,6,0,88,87,1,0,0,0,89,92,1,0,0,0,90,
		88,1,0,0,0,90,91,1,0,0,0,91,93,1,0,0,0,92,90,1,0,0,0,93,94,5,14,0,0,94,
		11,1,0,0,0,95,96,5,68,0,0,96,97,5,2,0,0,97,98,3,6,3,0,98,99,5,16,0,0,99,
		13,1,0,0,0,100,105,5,68,0,0,101,102,5,17,0,0,102,104,5,68,0,0,103,101,
		1,0,0,0,104,107,1,0,0,0,105,103,1,0,0,0,105,106,1,0,0,0,106,123,1,0,0,
		0,107,105,1,0,0,0,108,109,5,1,0,0,109,110,5,68,0,0,110,111,5,2,0,0,111,
		119,3,6,3,0,112,113,5,17,0,0,113,114,5,1,0,0,114,115,5,68,0,0,115,116,
		5,2,0,0,116,118,3,6,3,0,117,112,1,0,0,0,118,121,1,0,0,0,119,117,1,0,0,
		0,119,120,1,0,0,0,120,123,1,0,0,0,121,119,1,0,0,0,122,100,1,0,0,0,122,
		108,1,0,0,0,123,15,1,0,0,0,124,125,3,26,13,0,125,126,5,16,0,0,126,211,
		1,0,0,0,127,129,5,18,0,0,128,130,3,30,15,0,129,128,1,0,0,0,129,130,1,0,
		0,0,130,131,1,0,0,0,131,211,5,12,0,0,132,136,5,13,0,0,133,135,3,2,1,0,
		134,133,1,0,0,0,135,138,1,0,0,0,136,134,1,0,0,0,136,137,1,0,0,0,137,139,
		1,0,0,0,138,136,1,0,0,0,139,211,5,14,0,0,140,141,5,19,0,0,141,142,3,26,
		13,0,142,149,3,16,8,0,143,144,5,20,0,0,144,145,3,26,13,0,145,146,3,16,
		8,0,146,148,1,0,0,0,147,143,1,0,0,0,148,151,1,0,0,0,149,147,1,0,0,0,149,
		150,1,0,0,0,150,154,1,0,0,0,151,149,1,0,0,0,152,153,5,21,0,0,153,155,3,
		16,8,0,154,152,1,0,0,0,154,155,1,0,0,0,155,211,1,0,0,0,156,157,5,22,0,
		0,157,158,5,11,0,0,158,159,3,26,13,0,159,160,5,12,0,0,160,161,3,16,8,0,
		161,211,1,0,0,0,162,163,5,23,0,0,163,164,3,26,13,0,164,168,5,13,0,0,165,
		167,3,16,8,0,166,165,1,0,0,0,167,170,1,0,0,0,168,166,1,0,0,0,168,169,1,
		0,0,0,169,171,1,0,0,0,170,168,1,0,0,0,171,172,5,14,0,0,172,211,1,0,0,0,
		173,174,5,23,0,0,174,175,3,24,12,0,175,176,3,26,13,0,176,177,5,16,0,0,
		177,178,3,26,13,0,178,179,3,16,8,0,179,211,1,0,0,0,180,181,5,24,0,0,181,
		182,3,16,8,0,182,183,5,22,0,0,183,184,5,11,0,0,184,185,3,26,13,0,185,186,
		5,12,0,0,186,211,1,0,0,0,187,188,5,25,0,0,188,189,3,26,13,0,189,193,5,
		13,0,0,190,192,3,18,9,0,191,190,1,0,0,0,192,195,1,0,0,0,193,191,1,0,0,
		0,193,194,1,0,0,0,194,196,1,0,0,0,195,193,1,0,0,0,196,197,5,14,0,0,197,
		211,1,0,0,0,198,199,5,26,0,0,199,200,3,26,13,0,200,201,3,16,8,0,201,211,
		1,0,0,0,202,203,5,27,0,0,203,211,3,16,8,0,204,211,5,28,0,0,205,211,5,29,
		0,0,206,208,5,30,0,0,207,209,3,26,13,0,208,207,1,0,0,0,208,209,1,0,0,0,
		209,211,1,0,0,0,210,124,1,0,0,0,210,127,1,0,0,0,210,132,1,0,0,0,210,140,
		1,0,0,0,210,156,1,0,0,0,210,162,1,0,0,0,210,173,1,0,0,0,210,180,1,0,0,
		0,210,187,1,0,0,0,210,198,1,0,0,0,210,202,1,0,0,0,210,204,1,0,0,0,210,
		205,1,0,0,0,210,206,1,0,0,0,211,17,1,0,0,0,212,215,3,20,10,0,213,215,3,
		22,11,0,214,212,1,0,0,0,214,213,1,0,0,0,215,19,1,0,0,0,216,217,5,26,0,
		0,217,218,3,26,13,0,218,219,5,2,0,0,219,220,3,16,8,0,220,21,1,0,0,0,221,
		222,5,27,0,0,222,223,5,2,0,0,223,224,3,16,8,0,224,23,1,0,0,0,225,230,3,
		4,2,0,226,227,3,26,13,0,227,228,5,16,0,0,228,230,1,0,0,0,229,225,1,0,0,
		0,229,226,1,0,0,0,230,25,1,0,0,0,231,232,6,13,-1,0,232,233,5,31,0,0,233,
		340,3,26,13,33,234,235,5,32,0,0,235,340,3,26,13,32,236,237,5,49,0,0,237,
		238,3,6,3,0,238,239,5,13,0,0,239,244,3,26,13,0,240,241,5,17,0,0,241,243,
		3,26,13,0,242,240,1,0,0,0,243,246,1,0,0,0,244,242,1,0,0,0,244,245,1,0,
		0,0,245,247,1,0,0,0,246,244,1,0,0,0,247,248,5,14,0,0,248,340,1,0,0,0,249,
		250,5,50,0,0,250,251,3,6,3,0,251,252,5,13,0,0,252,257,3,32,16,0,253,254,
		5,17,0,0,254,256,3,32,16,0,255,253,1,0,0,0,256,259,1,0,0,0,257,255,1,0,
		0,0,257,258,1,0,0,0,258,260,1,0,0,0,259,257,1,0,0,0,260,261,5,14,0,0,261,
		340,1,0,0,0,262,263,5,53,0,0,263,264,5,11,0,0,264,265,3,26,13,0,265,266,
		5,17,0,0,266,267,3,26,13,0,267,268,5,12,0,0,268,340,1,0,0,0,269,270,5,
		54,0,0,270,271,5,11,0,0,271,272,3,26,13,0,272,273,5,17,0,0,273,274,3,26,
		13,0,274,275,5,12,0,0,275,340,1,0,0,0,276,277,5,55,0,0,277,278,5,11,0,
		0,278,279,3,26,13,0,279,280,5,12,0,0,280,340,1,0,0,0,281,282,5,56,0,0,
		282,283,5,11,0,0,283,284,3,26,13,0,284,285,5,17,0,0,285,290,3,26,13,0,
		286,287,5,17,0,0,287,289,3,26,13,0,288,286,1,0,0,0,289,292,1,0,0,0,290,
		288,1,0,0,0,290,291,1,0,0,0,291,293,1,0,0,0,292,290,1,0,0,0,293,294,5,
		12,0,0,294,340,1,0,0,0,295,296,5,57,0,0,296,297,5,11,0,0,297,298,3,26,
		13,0,298,299,5,12,0,0,299,340,1,0,0,0,300,301,5,58,0,0,301,302,5,11,0,
		0,302,303,3,26,13,0,303,304,5,12,0,0,304,340,1,0,0,0,305,306,5,59,0,0,
		306,307,5,11,0,0,307,308,3,26,13,0,308,309,5,12,0,0,309,340,1,0,0,0,310,
		311,5,68,0,0,311,312,5,13,0,0,312,317,3,34,17,0,313,314,5,17,0,0,314,316,
		3,34,17,0,315,313,1,0,0,0,316,319,1,0,0,0,317,315,1,0,0,0,317,318,1,0,
		0,0,318,320,1,0,0,0,319,317,1,0,0,0,320,321,5,14,0,0,321,340,1,0,0,0,322,
		340,5,63,0,0,323,340,5,64,0,0,324,340,5,65,0,0,325,340,5,62,0,0,326,340,
		5,66,0,0,327,328,5,61,0,0,328,329,5,68,0,0,329,331,5,11,0,0,330,332,3,
		30,15,0,331,330,1,0,0,0,331,332,1,0,0,0,332,333,1,0,0,0,333,340,5,12,0,
		0,334,340,5,68,0,0,335,336,5,11,0,0,336,337,3,26,13,0,337,338,5,12,0,0,
		338,340,1,0,0,0,339,231,1,0,0,0,339,234,1,0,0,0,339,236,1,0,0,0,339,249,
		1,0,0,0,339,262,1,0,0,0,339,269,1,0,0,0,339,276,1,0,0,0,339,281,1,0,0,
		0,339,295,1,0,0,0,339,300,1,0,0,0,339,305,1,0,0,0,339,310,1,0,0,0,339,
		322,1,0,0,0,339,323,1,0,0,0,339,324,1,0,0,0,339,325,1,0,0,0,339,326,1,
		0,0,0,339,327,1,0,0,0,339,334,1,0,0,0,339,335,1,0,0,0,340,395,1,0,0,0,
		341,342,10,30,0,0,342,343,7,1,0,0,343,394,3,26,13,31,344,345,10,29,0,0,
		345,346,7,2,0,0,346,394,3,26,13,30,347,348,10,28,0,0,348,349,7,3,0,0,349,
		394,3,26,13,29,350,351,10,27,0,0,351,352,7,4,0,0,352,394,3,26,13,28,353,
		354,10,26,0,0,354,355,7,5,0,0,355,394,3,26,13,27,356,357,10,25,0,0,357,
		358,7,6,0,0,358,394,3,26,13,26,359,360,10,24,0,0,360,361,7,7,0,0,361,394,
		3,26,13,25,362,364,10,31,0,0,363,365,3,28,14,0,364,363,1,0,0,0,365,366,
		1,0,0,0,366,364,1,0,0,0,366,367,1,0,0,0,367,394,1,0,0,0,368,369,10,23,
		0,0,369,394,7,8,0,0,370,371,10,20,0,0,371,372,5,51,0,0,372,373,3,26,13,
		0,373,374,5,52,0,0,374,375,5,51,0,0,375,376,3,26,13,0,376,377,5,52,0,0,
		377,394,1,0,0,0,378,379,10,19,0,0,379,380,5,51,0,0,380,381,3,26,13,0,381,
		382,5,52,0,0,382,394,1,0,0,0,383,384,10,18,0,0,384,385,5,51,0,0,385,386,
		3,26,13,0,386,387,5,2,0,0,387,388,3,26,13,0,388,389,5,52,0,0,389,394,1,
		0,0,0,390,391,10,9,0,0,391,392,5,60,0,0,392,394,5,68,0,0,393,341,1,0,0,
		0,393,344,1,0,0,0,393,347,1,0,0,0,393,350,1,0,0,0,393,353,1,0,0,0,393,
		356,1,0,0,0,393,359,1,0,0,0,393,362,1,0,0,0,393,368,1,0,0,0,393,370,1,
		0,0,0,393,378,1,0,0,0,393,383,1,0,0,0,393,390,1,0,0,0,394,397,1,0,0,0,
		395,393,1,0,0,0,395,396,1,0,0,0,396,27,1,0,0,0,397,395,1,0,0,0,398,400,
		5,11,0,0,399,401,3,30,15,0,400,399,1,0,0,0,400,401,1,0,0,0,401,402,1,0,
		0,0,402,406,5,12,0,0,403,404,5,60,0,0,404,406,5,68,0,0,405,398,1,0,0,0,
		405,403,1,0,0,0,406,29,1,0,0,0,407,412,3,26,13,0,408,409,5,17,0,0,409,
		411,3,26,13,0,410,408,1,0,0,0,411,414,1,0,0,0,412,410,1,0,0,0,412,413,
		1,0,0,0,413,31,1,0,0,0,414,412,1,0,0,0,415,416,5,13,0,0,416,421,3,26,13,
		0,417,418,5,17,0,0,418,420,3,26,13,0,419,417,1,0,0,0,420,423,1,0,0,0,421,
		419,1,0,0,0,421,422,1,0,0,0,422,424,1,0,0,0,423,421,1,0,0,0,424,425,5,
		14,0,0,425,33,1,0,0,0,426,427,5,68,0,0,427,428,5,2,0,0,428,429,3,26,13,
		0,429,35,1,0,0,0,33,39,47,55,64,72,79,90,105,119,122,129,136,149,154,168,
		193,208,210,214,229,244,257,290,317,331,339,366,393,395,400,405,412,421
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace analyzer
