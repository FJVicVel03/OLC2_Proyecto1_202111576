// Declaración de struct simple
type Persona struct {
	Nombre   string
	Edad     int
	Estatura float
	Activo   bool
}

// Declaración de struct para nodo de lista enlazada

func main(){
    puntos := 0

	fmt.Println("=== Archivo de prueba de structs ===")

	// 1. Declaración (1 punto)
	fmt.Println("==== Declaración ====")
	puntosDeclaracion := 0

	fmt.Println("Declaración de structs:")
	fmt.Println("type Persona struct {")
	fmt.Println("    Nombre   string")
	fmt.Println("    Edad     int")
	fmt.Println("    Estatura float64")
	fmt.Println("    Activo   bool")
	fmt.Println("}")

    fmt.Println("\ntype Nodo struct {")
	fmt.Println("    Nombre    string")
	fmt.Println("    Valor     int")
	fmt.Println("    Siguiente Nodo")
	fmt.Println("}")

    // Verificación manual
	puntosDeclaracion = puntosDeclaracion + 1

    // 2. Instanciación (2 puntos)
	fmt.Println("\n==== Instanciación ====")
	puntosInstanciacion := 0

	fmt.Println("Instanciación con valores iniciales:")
	persona1 := Persona{
		Nombre:   "Juan",
		Edad:     30,
		Estatura: 1.75,
		Activo:   true
	}
	fmt.Println("###Validacion Manual")
	fmt.Println("persona1:", persona1)
	puntosInstanciacion = puntosInstanciacion + 2

    // 3. Asignación a propiedades de tipos primitivos (2 puntos)
	fmt.Println("\n==== Asignación a propiedades de tipos primitivos ====")
	puntosAsignacionPrimitivos := 0

	fmt.Println("Asignación directa:")
	persona1.Nombre = "María"
	persona1.Edad = 25
	persona1.Estatura = 1.65
	persona1.Activo = true

	if persona1.Nombre == "María" && persona1.Edad == 25 {
		puntosAsignacionPrimitivos = puntosAsignacionPrimitivos + 2
		fmt.Println("OK Asignación directa: correcto")
	} else {
		fmt.Println("X Asignación directa: incorrecto")
	}

    // 4. Acceso a propiedades de tipos primitivos (2 puntos)
	fmt.Println("\n==== Acceso a propiedades de tipos primitivos ====")
	puntosAccesoPrimitivos := 0

	fmt.Println("Acceso directo:")
	nombrePersona1 := persona1.Nombre
	edadPersona1 := persona1.Edad
	fmt.Println("Nombre de persona1:", nombrePersona1)
	fmt.Println("Edad de persona1:", edadPersona1)

	if nombrePersona1 == "María" && edadPersona1 == 25 {
		puntosAccesoPrimitivos = puntosAccesoPrimitivos + 2
		fmt.Println("OK Acceso directo: correcto")
	} else {
		fmt.Println("X Acceso directo: incorrecto")
	}

    // 5. Asignación a propiedades dentro de structs anidados (3 puntos)
	fmt.Println("\n==== Asignación a propiedades dentro de structs anidados ====")
	puntosAsignacionAnidados := 0
    puntosAccesoAnidados := 0
    puntosFuncionesStruct := 0

    puntos = puntosDeclaracion + puntosInstanciacion + puntosAsignacionPrimitivos +
		puntosAccesoPrimitivos + puntosAsignacionAnidados + puntosAccesoAnidados +
		puntosFuncionesStruct
    

    fmt.Println("\n=== Tabla de Resultados ===")
	fmt.Println("+------------------------------------------+--------+-------+")
	fmt.Println("| Característica                           | Puntos | Total |")
	fmt.Println("+------------------------------------------+--------+-------+")
	fmt.Println("| Declaración                              | ", puntosDeclaracion, "    | 1     |")
	fmt.Println("| Instanciación                            | ", puntosInstanciacion, "    | 2     |")
	fmt.Println("| Asignación a propiedades primitivas      | ", puntosAsignacionPrimitivos, "    | 2     |")
	fmt.Println("| Acceso a propiedades primitivas          | ", puntosAccesoPrimitivos, "    | 2     |")
	fmt.Println("| Asignación a propiedades anidadas        | ", puntosAsignacionAnidados, "    | 3     |")
	fmt.Println("| Acceso a propiedades anidadas            | ", puntosAccesoAnidados, "    | 3     |")
	fmt.Println("| Funciones asociadas a structs            | ", puntosFuncionesStruct, "    | 6     |")
	fmt.Println("+------------------------------------------+--------+-------+")
	fmt.Println("| TOTAL                                    | ", puntos, "   | 19    |")
	fmt.Println("+------------------------------------------+--------+-------+")

	

}
